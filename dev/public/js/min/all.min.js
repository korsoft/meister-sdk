var meister = angular.module('meister', ['ngMaterial', 'ngAnimate','ngSanitize', 'ngMessages',
 'ngAria', 'ui.router','ngCookies','md.data.table','chart.js','TreeWidget','angular-oauth2',
 'ng.jsoneditor','angular-loading-bar']);

meister.constant('SERVER_BASE_URL', "http://localhost:8000");
meister.constant('CLIENT_SECRET_KEY',"GzkU62Ruwo29riFgJHVDPw377k8hYu5dXXYxgYSR");
meister.constant('SYSTEM_ADMIN',99);
meister.constant('CLIENT_ADMIN',49);
meister.constant('CLIENT_USER',29);
meister.constant('COOKIE_LAST_REQUEST','meister-sdk-last-request');
meister.constant('COOKIE_MAX_TIMEOUT_REQUEST',30); //in minutes

(function(app) {
    app.config(['$stateProvider','$compileProvider', '$mdDateLocaleProvider', '$urlRouterProvider','OAuthProvider',
      'OAuthTokenProvider','SERVER_BASE_URL','CLIENT_SECRET_KEY', 'cfpLoadingBarProvider',
        function($stateProvider, $compileProvider, $mdDateLocaleProvider, $urlRouterProvider, OAuthProvider, OAuthTokenProvider,
          SERVER_BASE_URL, CLIENT_SECRET_KEY,cfpLoadingBarProvider) {

          $mdDateLocaleProvider.formatDate = function(date) {
         return moment(date).format('YYYY-MM-DD');
        };

        cfpLoadingBarProvider.includeSpinner=false;
      
      $compileProvider.preAssignBindingsEnabled(true);
          
        OAuthTokenProvider.configure({
            name: 'meister-sdk-token',
              options: {
                secure: false
              }
        });
        
        OAuthProvider.configure({
              baseUrl: SERVER_BASE_URL,
              clientId: '2',
              clientSecret: CLIENT_SECRET_KEY, // optional
              grantPath: '/api/login',
              revokePath: '/api/logout'
        });

        $urlRouterProvider.otherwise('/home');

        $stateProvider.state('login', {
		url: '/login',
		templateUrl: 'partials/login-partial.html',
		controller: 'LoginController'
	})

	.state('home', {
            url: '/home',
            templateUrl: 'partials/home-partial.html',
            controller: 'HomeController'
        })
        .state('clients', {
            url: '/clients',
            templateUrl: 'partials/clients-partial.html',
            controller: 'ClientController'
        })
        .state('users', {
            url: '/users',
            templateUrl: 'partials/users-partial.html',
            controller: 'UserController'
        })
        .state('edit-profile', {
            url: '/edit-profile',
            templateUrl: 'partials/edit-profile-partial.html',
            controller: 'EditProfileController'
        })
        .state('gateways', {
            url: '/gateways',
            templateUrl: 'partials/client-gateways-partial.html',
            controller: 'ClientGatewayController'
        })
        .state('endpointManagementTool', {
            url: '/endpoint-management-tool',
            templateUrl: 'partials/endpoint-management-tool-partial.html',
            controller: 'EndpointManagementToolController'
        });

    }]).run(['$rootScope', '$location','$mdToast','OAuth', 
    function ($rootScope, $location,$mdToast,OAuth) {

      $rootScope.OAuth = OAuth;
        
        $rootScope.$on('$locationChangeStart', function (event, next, current) {
            // redirect to login page if not logged in
            console.log("locationChangeStart--->");
            //$cookies.put(COOKIE_LAST_REQUEST,Date.now());
            if ($location.path() !== '/login' && !OAuth.isAuthenticated()) {
                $location.path('/login');
            }
        });

        $rootScope.$on('oauth:error', function(event, rejection) {
          console.log("oauth:error--->");
          // Ignore `invalid_grant` error - should be catched on `LoginController`.
          if ('invalid_grant' === rejection.data.error) {
            return;
          }

          // Refresh token when a `invalid_token` error occurs.
          if ('invalid_token' === rejection.data.error) {
            return OAuth.getRefreshToken();
          }

          $mdToast.show(
                          $mdToast.simple()
                            .textContent(rejection.data.error)
                            .position('top' )
                            .highlightClass('md-warn')
                            .hideDelay(3000)
                        );

          // Redirect to `/login` with the `error_reason`.
          return $location.path('/login');
        });
    }]);

    app.factory('httpResponseInterceptor', ['$q', '$timeout','$rootScope', '$location','$cookies',
      'COOKIE_LAST_REQUEST','COOKIE_MAX_TIMEOUT_REQUEST',
      function($q, $timeout, $rootScope, $location, $cookies, COOKIE_LAST_REQUEST, COOKIE_MAX_TIMEOUT_REQUEST) {
        return {
            request: function(config) {
              var last_request = $cookies.get(COOKIE_LAST_REQUEST);
              if(last_request){
                var current_time = Date.now();
                var difference = current_time - last_request;
                var resultInMinutes = Math.round(difference / 60000);
                console.log("resultInMinutes",resultInMinutes);
                if(resultInMinutes>COOKIE_MAX_TIMEOUT_REQUEST){
                  console.log("Revoke token authentication...");
                   $rootScope.logout();
                } 
              } 
              
              $cookies.put(COOKIE_LAST_REQUEST,Date.now());  
              //console.log("request interceptor---->",config);
              var deferred = $q.defer();
              deferred.resolve(config);
              return deferred.promise;
            },
            responseError: function(rejection) {
              //console.log("rejection interceptor------------------>");
                if (rejection.status === 401) {
                    // Something like below:
                    console.log("401 ERROR");
                    $cookies.remove('meister-sdk-token');
                    $location.path('/login');
                }
                return $q.reject(rejection);
            }
        };
    }]);

    app.config(function($httpProvider) {
      $httpProvider.interceptors.push('httpResponseInterceptor');
  });
})(meister);

(function(app) {
	app.factory('AuthenticationService',
    ['OAuth',
    function (OAuth) {
        var service = {};

        service.Login = function (user, pass) {
            return OAuth.getAccessToken({username:user,password:pass,email:user});
        };

        service.Logout = function(){
        	return OAuth.revokeToken();
        };
 
        return service;
    }])
 
})(meister);

(function(app) {
	app.factory('apiUtils',
    ['$http','SERVER_BASE_URL',
    function ($http, SERVER_BASE_URL) {
       
        var API_BASE_URL = SERVER_BASE_URL + '/api';
		
		var METHOD_GET = 'GET';
		var METHOD_POST = 'POST';
		var METHOD_PUT = 'PUT';
		var METHOD_DELETE = 'DELETE';

        var prepareRequest = function(method, path, params, data){
			var req = {};
			req.method = method;
			req.url = API_BASE_URL + path;

			req.params = params || {};

			if (data){
				req.data = data;
			}

			return req;
		};

	var apiUtils = {};

	apiUtils.get = function(path, params, cb){
		var req = prepareRequest(METHOD_GET, path, params, null);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.post = function(path, data, cb){
		var req = prepareRequest(METHOD_POST, path, null, data);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.put = function(path, data, cb){
		var req = prepareRequest(METHOD_PUT, path, null, data);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.del = function(path, params, cb){
		var req = prepareRequest(METHOD_DELETE, path, params, cb);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};
 

    return apiUtils;
    }]);
})(meister);

(function(app) {
	app.factory('ClientService',
    ['$http','SERVER_BASE_URL',
    function ($http,SERVER_BASE_URL) {
        var service = {};

        service.index = function () {
            return $http.get(SERVER_BASE_URL + '/api/clients');
        };

        service.store = function(data){
            return $http.post(SERVER_BASE_URL + '/api/clients',data);
        };

        service.show = function(id){
            return $http.get(SERVER_BASE_URL + '/api/clients/'+id);
        }

        service.update = function(id, data){
            return $http.put(SERVER_BASE_URL + '/api/clients/'+id, data);
        }

       service.destroy = function(id){
            return $http.delete(SERVER_BASE_URL + '/api/clients/'+id);
        }

        return service;
    }]);
})(meister);
(function(app) {
	app.factory('GatewayService',
    ['$http','SERVER_BASE_URL',
    function ($http,SERVER_BASE_URL) {
        var service = {};

        service.index = function () {
            return $http.get(SERVER_BASE_URL + '/api/clientgateways');
        };

        service.store = function(data){
            return $http.post(SERVER_BASE_URL + '/api/clientgateways',data);
        };

        service.show = function(id){
            return $http.get(SERVER_BASE_URL + '/api/clientgateways/'+id);
        }

        service.update = function(id, data){
            return $http.put(SERVER_BASE_URL + '/api/clientgateways/'+id, data);
        }

       service.destroy = function(id){
            return $http.delete(SERVER_BASE_URL + '/api/clientgateways/'+id);
        }

        service.test_connection = function(id){
            return $http.get(SERVER_BASE_URL + '/api/clientgateways/'+id+'/test_connection');
        };

        service.execute = function(id){
            return $http.get(SERVER_BASE_URL + '/api/clientgateways/'+id+'/execute');
        };

        service.execute_changes = function(id,params){
            return $http.post(SERVER_BASE_URL + '/api/clientgateways/'+id+'/execute',params);
        };

        service.execute_endpoint = function(id,params){
            return $http.post(SERVER_BASE_URL + '/api/clientgateways/'+id+'/execute_endpoint',params);
        };

        

        service.buildJsonByNewModule = function(json, parentNode,module){
            console.log("buildJsonByNewEndpoint...");
            console.log("json",json);
            console.log("parentNode",parentNode);
            console.log("module",module);
            var json_to_send = {};

            var project = _.find(json, function(p){
                return p.PKY == parentNode.PKY;
            });

            if(project){
                console.log("project",project);
                json_to_send.PKY = project.PKY;
                json_to_send.PROJECT = project.PROJECT;
                json_to_send.MODULES = [];
                 var moduleItem = {
                      PKY: module.PKY,
                      NAME: module.NAME,
                      DATE: moment(module.DATE).format('YYYYMMDD'),
                      ENDPOINTS: module.ENDPOINTS
                };
                json_to_send.MODULES.push(moduleItem);
            }
            return json_to_send;
        };

        service.buildJsonByNewEndpoint = function(json, parentNode, endpoint){
            console.log("buildJsonByNewEndpoint...");
            console.log("json",json);
            console.log("parentNode",parentNode);
            console.log("endpoint",endpoint);
            var json_to_send = {};
            _.forEach(json, function(project){
                console.log("project",project);
                json_to_send.PKY = project.PKY;
                json_to_send.PROJECT = project.PROJECT;
                json_to_send.MODULES = [];
                var module = _.find(project.MODULES, function(m){
                    return m.PKY == parentNode.PKY;
                });
                console.log("module",module);
                if(module){
                    var moduleItem = {
                      PKY: module.PKY,
                      NAME: module.NAME,
                      DATE:module.DATE.split("-").join(""),
                      ENDPOINTS: []
                    };
                    moduleItem.ENDPOINTS.push(endpoint);
                    json_to_send.MODULES.push(moduleItem);
                    return false;
                }
            });
            return json_to_send;
        };

        service.buildJsonByNewStyle = function(json, parentNode, style){
            console.log("buildJsonByNewEndpoint...");
            console.log("json",json);
            console.log("parentNode",parentNode);
            console.log("style",style);
            var json_to_send = {};
            _.forEach(json, function(project){
                console.log("project",project);
                json_to_send.PKY = project.PKY;
                json_to_send.PROJECT = project.PROJECT;
                json_to_send.MODULES = [];
                var module = _.find(project.MODULES, function(m){
                    var endpoint = _.find(m.ENDPOINTS, function(e){
                        return e.PKY == parentNode.PKY;
                    });
                    if(endpoint)
                        return m;
                });
                console.log("module",module);
                if(module){
                    var moduleItem = {
                      PKY: module.PKY,
                      NAME: module.NAME,
                      DATE:module.DATE.split("-").join(""),
                      ENDPOINTS: []
                    };
                    var endpoint = _.find(module.ENDPOINTS, function(e){
                        return e.PKY == parentNode.PKY;
                    });

                    endpoint.STYLES = [];
                    endpoint.STYLES.push(style);
                    moduleItem.ENDPOINTS.push(endpoint);
                    json_to_send.MODULES.push(moduleItem);
                    return false;
                }
            });
            return json_to_send;
        };

        return service;
    }]);
})(meister);

(function(app) {
	app.factory('MessageUtil',
    ['$mdToast',
    function ($mdToast) {
        var service = {};

        service.showError = function (message) {
             $mdToast.show(
                $mdToast.simple()
                        .textContent(message)
                        .position('top right')
                        .theme('error-toast')
                        .hideDelay(3000)
                    );
        };

        service.showInfo = function (message) {
             $mdToast.show(
                $mdToast.simple()
                        .textContent(message)
                        .position('top right')
                        .hideDelay(3000)
                    );
        };

        
        return service;
    }]);
})(meister);
(function(app) {
	app.factory('UserService',
    ['$http','SERVER_BASE_URL',
    function ($http,SERVER_BASE_URL) {
        var service = {};

        service.index = function () {
            return $http.get(SERVER_BASE_URL + '/api/users');
        };

        service.store = function(data){
            return $http.post(SERVER_BASE_URL + '/api/users',data);
        };

        service.show = function(id){
            return $http.get(SERVER_BASE_URL + '/api/users/'+id);
        }

        service.update = function(id, data){
            return $http.put(SERVER_BASE_URL + '/api/users/'+id, data);
        }

       service.destroy = function(id){
            return $http.delete(SERVER_BASE_URL + '/api/users/'+id);
        }

        service.types = function(){
            return $http.get(SERVER_BASE_URL + '/api/types');
        }

        service.update_my_user = function(id, data){
            return $http.put(SERVER_BASE_URL + '/api/users/'+id+'/update_my_user', data);
        }

        return service;
    }]);
})(meister);
(function(app) {
	app.controller('ClientController',
    ['$scope', '$location','$mdToast','$mdDialog','ClientService','MessageUtil',
    function ($scope, $location, $mdToast, $mdDialog, ClientService, MessageUtil) {
        
        $scope.clients = [];
        $scope.promise = null;
        
        $scope.filter = {
          show: false
        }

        $scope.query = {
          order: 'name',
          limit: 5,
          page: 1,
          filter:''
        };

        $scope.limitOptions = [5, 10, 25, 50, 100];

        $scope.removeFilter = function(){
          $scope.filter.show = false;
          $scope.query.filter = "";
        };

        $scope.init = function(){
          console.log("ClientController init...");
          $scope.promise = ClientService.index();

          $scope.promise.then(
                  function(result) { 
                    console.log("result",result);
                      $scope.clients = result.data;
                  },
                  function(errorPayload) {
                      console.log('failure login', errorPayload);
                      MessageUtil.showError(errorPayload.data.message);
                  }
             );
        };

         $scope.add = function(ev, client) {
              $mdDialog.show({
                controller: 'ClientDialogController',
                templateUrl: 'templates/client-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 client: null
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("Client was created");
                $scope.init();
              }, function() {
               
              });
         };

         $scope.edit = function(ev, client) {
              $mdDialog.show({
                controller: 'ClientDialogController',
                templateUrl: 'templates/client-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 client: client
               }
              })
              .then(function(result) {
                  MessageUtil.showInfo("Client was updated");
                  $scope.init();
              }, function() {
               
              });
         };

         $scope.delete = function(ev, client){
            var confirm = $mdDialog.confirm()
                .title('You are about to delete the following')
                .htmlContent('Client ' + client.name)
                .targetEvent(ev)
                .ok('Yes')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
               $scope.promise = ClientService.destroy(client.id);
               $scope.promise.then(
                  function(result){
                    MessageUtil.showInfo("Client was deleted");
                    $scope.init();
                  },
                  function(error){
                    MessageUtil.showError(error.data.message);
                  }
                );
            }, function() {
              
            });
         };

        
    }]);
})(meister);
(function(app) {
	app.controller('ClientDialogController',
    ['$scope','$mdDialog','client','ClientService','MessageUtil',
    function ($scope, $mdDialog, client, ClientService, MessageUtil) {
  
        $scope.client = {};
        $scope.promise = null;
         $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!client)
          $scope.client.name = "";
        else
          $scope.client = angular.copy(client);

        console.log("Client", client);

        $scope.save = function(){
          
            if($scope.client.id)
              $scope.promise = ClientService.update($scope.client.id, $scope.client);
            else
              $scope.promise = ClientService.store($scope.client);

            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  $mdDialog.hide(result);
                },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
         
        };
        
    }]);
})(meister);
(function(app) {
	app.controller('ClientGatewayController',
    ['$scope', '$location','$mdToast','$mdDialog','MessageUtil','GatewayService',
    function ($scope,$location,$mdToast,$mdDialog,MessageUtil,GatewayService) {
        
        $scope.gateways = [];
        $scope.promise = null;
        
        $scope.filter = {
          show: false
        }

        $scope.query = {
          order: 'name',
          limit: 5,
          page: 1,
          filterByName:''
        };

        $scope.limitOptions = [5, 10, 25, 50, 100];

        $scope.removeFilter = function(){
          $scope.filter.show = false;
          $scope.query.filterByName = "";
        };

        $scope.init = function(){
          console.log("ClientGatewayController init...");
          $scope.promise = GatewayService.index();

          $scope.promise.then(
                  function(result) { 
                    console.log("result",result);
                      $scope.gateways = result.data;
                  },
                  function(errorPayload) {
                      console.log('failure', errorPayload);
                      MessageUtil.showError(errorPayload.data.message);
                  }
             );
        };

         $scope.add = function(ev, gateway) {
              $mdDialog.show({
                controller: 'ClientGatewayDialogController',
                templateUrl: 'templates/client-gateway-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 gateway: null
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("Gateway was created");
                $scope.init();
              }, function() {
               
              });
         };

         $scope.type = function(type){
            if(type == 0)
              return "BASIC";
            else if(type == 1)
              return "FORM";
            else if(type == 2)
              return "DIGEST";
            else if(type == 3)
              return "OAUTH";
            else if(type == 4)
              return "OAUTH2";
            return "";
         };

         $scope.edit = function(ev, gateway) {
              $mdDialog.show({
                controller: 'ClientGatewayDialogController',
                templateUrl: 'templates/client-gateway-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 gateway: gateway
               }
              })
              .then(function(result) {
                  MessageUtil.showInfo("Gateway was updated");
                  $scope.init();
              }, function() {
               
              });
         };

         $scope.delete = function(ev, gateway){
            var confirm = $mdDialog.confirm()
                .title('You are about to delete the following')
                .htmlContent('Gateway ' + gateway.name)
                .targetEvent(ev)
                .ok('Yes')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
               $scope.promise = GatewayService.destroy(gateway.id);
               $scope.promise.then(
                  function(result){
                    MessageUtil.showInfo("Gateway was deleted");
                    $scope.init();
                  },
                  function(error){
                    MessageUtil.showError(error.data.message);
                  }
                );
            }, function() {
              
            });
         };

         $scope.test_connection = function(evt, gateway){
            $scope.promise = GatewayService.test_connection(gateway.id);

            $scope.promise.then(
                function(result){
                  MessageUtil.showInfo("Connection successful");
                },
                function(error){
                   MessageUtil.showError(error.data.message);
                }
              );
         };
        
    }]);
})(meister);
(function(app) {
	app.controller('ClientGatewayDialogController',
    ['$scope','$rootScope','$mdDialog','gateway','GatewayService','ClientService','MessageUtil',
    function ($scope,$rootScope, $mdDialog, gateway, GatewayService,ClientService, MessageUtil) {
  
        $scope.gateway = {};
        $scope.clients = [];
        $scope.types = [
          {id:0,name:"BASIC"},
          {id:1,name:"FORM"},
          {id:2,name:"DIGEST"},
          {id:3,name:"OAUTH"},
          {id:4,name:"OAUTH2"}
        ];
        $scope.promise = null;

        $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!gateway){
          $scope.gateway.name = "";
          $scope.gateway.url = "";
          $scope.gateway.username = "";
          $scope.gateway.password = "";
          $scope.gateway.auth_type = 0;
          $scope.gateway.digest = "";
          $scope.gateway.consumer_key = "";
          $scope.gateway.consumer_secret = "";
          $scope.gateway.token = "";
          $scope.gateway.token_secret = "";
          $scope.gateway.client_id_for_oauth2 = "";
          $scope.gateway.client_secret_for_oauth2 = "";
          $scope.gateway.auth_url_for_oauth2 = "";
          $scope.gateway.endpoint_lookup = "";
          $scope.gateway.endpoint_master = "";
        } else {
          $scope.gateway = angular.copy(gateway);
        }

        console.log("gateway", gateway);

        if($rootScope.user_type() == $rootScope.SYSTEM_ADMIN){
          $scope.promise = ClientService.index();

          $scope.promise.then(
              function(result){
                console.log("result",result);
                $scope.clients = result.data;
              },
              function(error){
                console.log("error",error);
                    MessageUtil.showError(error.data.message);
              }
          );
        }

        $scope.changeAuthType = function(type){
          $scope.gateway.auth_type = type;
          if(type != 2){
            $scope.gateway.digest = "";
          }
          if(type != 3){
            $scope.gateway.consumer_key = "";
            $scope.gateway.consumer_secret = "";
            $scope.gateway.token = "";
            $scope.gateway.token_secret = "";
            $scope.gateway.username = "";
            $scope.gateway.password = "";
          }
          if(type != 4){
            $scope.gateway.client_id_for_oauth2 = "";
            $scope.gateway.client_secret_for_oauth2 = "";
            $scope.gateway.auth_url_for_oauth2 = "";
          }
        };

        $scope.save = function(){
          
            if($scope.gateway.id)
              $scope.promise = GatewayService.update($scope.gateway.id, $scope.gateway);
            else
              $scope.promise = GatewayService.store($scope.gateway);

            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  $mdDialog.hide(result);
                },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
         
        };
        
    }]);
})(meister);
(function(app) {
	app.controller('EditProfileController',
    ['$scope','$rootScope','$mdToast','UserService','MessageUtil',
    function ($scope,$rootScope, $mdToast, UserService, MessageUtil) {
        
        $scope.user = {};
        $scope.repassword = '';
        $scope.promise = null;
        
        $scope.init = function(){
          console.log("EditProfileController init...");
          $scope.promise = UserService.show($rootScope.user_id());

          $scope.promise.then(
                  function(result) { 
                    console.log("result",result);
                      $scope.user = result.data;
                      $scope.user.password = "";
                  },
                  function(errorPayload) {
                      console.log('failure login', errorPayload);
                      MessageUtil.showError(errorPayload.data.message);
                  }
             );
        };

        $scope.update = function(){
          $scope.promise = UserService.update_my_user($rootScope.user_id(),$scope.user);

          $scope.promise.then(
              function(result){
                MessageUtil.showInfo("User was updated");
                $scope.user.password = "";
                $scope.repassword = "";
              },
              function(error){
                console.log('failure login', error);
                MessageUtil.showError(error.data.message);
              }
          );
        };
        
    }]);
})(meister);
(function(app) {
	app.controller('EndpointDialogController',
    ['$scope','$mdDialog','endpoint','parentNode','gateway','json','GatewayService','MessageUtil',
    function ($scope, $mdDialog, endpoint, parentNode, gateway,json, GatewayService, MessageUtil) {
  
        $scope.endpoint = {};
        $scope.parentNode = {};
        $scope.page=1;

        $scope.promise = null;
         $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!endpoint){
          $scope.endpoint.PKY = "";
          $scope.endpoint.NAMESPACE = "";
          $scope.endpoint.LONG_TEXT = "";
          $scope.endpoint.ENDPOINT_MAIN = "";
          $scope.endpoint.HANDLER = "";
          $scope.endpoint.BUS_NAME = "";
          $scope.endpoint.TYPE = "";
          $scope.endpoint.VERSION = "";
          $scope.endpoint.LOCKED = "";
          $scope.endpoint.PACKAGE = "";
          $scope.endpoint.TRANSPORT = "";
          $scope.endpoint.STYLES = [{PKY:"",DIRECTION:"I",NAME:"Default",JSON:"",CLASS_NAME:""}];
        } else {
          $scope.endpoint = angular.copy(endpoint);
        }

        $scope.parentNode = parentNode;
        console.log("Endpoint", endpoint);
        console.log("ParenNode", parentNode);


        $scope.save = function(){

          var json_to_send =  GatewayService.buildJsonByNewEndpoint(json, parentNode.source, $scope.endpoint);
          
          var params = {
            json: angular.toJson(json_to_send)
          };

            $scope.promise = GatewayService.execute_changes(gateway.id, params);
            
            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  /*var endpointItem = {
                      name: $scope.endpoint.NAMESPACE,
                      source: $scope.endpoint,
                      expanded: false,
                      children: []
                    };
                  parentNode.children.push(endpointItem);
                  */
                    $mdDialog.hide(result);
                  },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
         
        };

        $scope.changePage = function (page){
          $scope.page=page;
        }

        $scope.addStyle = function () {
          $scope.endpoint.STYLES.push({PKY:"",DIRECTION:"",NAME:"",JSON:"",CLASS_NAME:""});
        }

        $scope.deleteStyle = function (index) {
          $scope.endpoint.STYLES.splice(index, 1);
        }


        $scope.checkUniqueName= function () {
          var counts = [];
        //  console.log($scope.endpoint.Payload_styles[0]);
          for(var i = 0; i < $scope.endpoint.STYLES.length; i++) {
              if(counts[$scope.endpoint.STYLES[i].NAME+$scope.endpoint.STYLES[i].DIRECTION] === undefined) {
                  counts[$scope.endpoint.STYLES[i].NAME+$scope.endpoint.STYLES[i].DIRECTION] = 1;
              } else {
                  return true;
              }
          }
          return false;
        }
        
    }]);
})(meister);
(function(app) {
	app.controller('EndpointManagementToolController', 
		['$scope','$mdToast','$mdDialog','MessageUtil','GatewayService',
		function($scope, $mdToast,$mdDialog,MessageUtil,GatewayService) {

		$scope.promise = null;
		$scope.gateways = [];
		$scope.gatewaySelectedId = null;
		$scope.gatewaySelected = null;
		$scope.treeOptions = {showIcon:false,expandOnClick:false};
		$scope.nodeSelected = null;
		$scope.nodeExpanded = null;
		var gatewayResponse = null;
		$scope.json = null;
		$scope.payload_json = {json: null, options: {mode: 'tree'}};
		$scope.endpointsTree = [];
		$scope.payloadsTree = [];

		$scope.styleSelected = null;
		$scope.styles = [];
		$scope.show_select_gateway = true;
		$scope.json_details = "";
		$scope.url_details = "";

		$scope.loading_tree = false;

		$scope.init = function(){

			console.log("home controller init...");
			
			$scope.promise = GatewayService.index();

			$scope.promise.then(
				function(result){
					console.log("result",result);
                     $scope.gateways = result.data;
				},
				function(error){
					 console.log('failure', error);
                     MessageUtil.showError(error.data.message);
				}
			);
		};

		$scope.isArray = function(what) {
			    return Object.prototype.toString.call(what) === '[object Array]';
		}

		$scope.build_tree = function(){
			console.log("build_tree...");
			$scope.endpointsTree = [];
			$scope.payloadsTree = [];
			$scope.payload_json = {json: null, options: {mode: 'tree'}};
			$scope.json_details = "";
			$scope.url_details = "";
			$scope.styleSelected = null;
			var rootNode = {
				name: $scope.gatewaySelected.name,
				children: []
			};
			$scope.endpointsTree.push(rootNode);
			console.log("Building tree",gatewayResponse);
			if(gatewayResponse && gatewayResponse.d && gatewayResponse.d.results 
				&& gatewayResponse.d.results.length > 0){
				$scope.json = angular.fromJson(gatewayResponse.d.results[0].Json);
				console.log("Json",$scope.json);
				_.forEach($scope.json, function(node){
					 var nodeItem = {
						name:node.PROJECT,
						source:node,
						children: []
					};
					rootNode.children.push(nodeItem);
					_.forEach(node.MODULES, function(module){
						var moduleItem = {
							name: module.NAME,
							source:module,
							children: []
						};
						nodeItem.children.push(moduleItem);
						_.forEach(module.ENDPOINTS, function(endpoint){
							var endpointItem = {
								name: endpoint.NAMESPACE,
								source: endpoint,
								expanded: false,
								children: []
							};
							moduleItem.children.push(endpointItem);
							_.forEach(endpoint.STYLES, function(style){
								var styleItem = {
									name: style.NAME,
									source: style,
									expanded: false,
									parent: endpointItem,
									children: []
								};
								endpointItem.children.push(styleItem);
							});
						});
					});
				});
					
			}
			
		};

		$scope.changeGateway = function(id){
			console.log("changeGateway",id);
			$scope.loading_tree = true;
			$scope.url_details = "";
			$scope.gatewaySelectedId = id;
			$scope.nodeSelected = null;
			$scope.nodeExpanded = null;
			$scope.styleSelected = null;
			console.log("Gateway selected", $scope.gatewaySelectedId);
			$scope.show_select_gateway = false;
			$scope.gatewaySelected = _.find($scope.gateways,function(g){
				return id == g.id;
			});
			$scope.promise = GatewayService.execute(id);
			$scope.promise.then(
				function(result){
					$scope.loading_tree = false;
					console.log("result",result);
                    gatewayResponse = result.data;
                    MessageUtil.showInfo("Gateway data loaded");
                    $scope.build_tree();
				},
				function(error){
					$scope.loading_tree = false;
					console.log('failure', error);
                    MessageUtil.showError(error.data.message);
				}
			);
		};

		$scope.execute = function(event, node){
			console.log("Execute event for endpoint",node);
			var params = {"endpoint":node.name};
			$scope.json_details = "";
			$scope.promise = GatewayService.execute_endpoint($scope.gatewaySelected.id,params);
			$scope.promise.then(
				function(result){
					console.log("result",result);
					$scope.payload_json.json = angular.fromJson(result.data.data.d.results[0].Json);
				},
				function(error){
					console.log('failure', error);
                    MessageUtil.showError(error.data.message);
				}
			);
		};

		$scope.execute_by_style = function(event, node){
			console.log("execute_by_style",$scope.endpointsTree);
			$scope.styleSelected = node;
			$scope.execute(event, node.parent);
		};


		$scope.execute_details = function(event){
			var node = null;
			
			if($scope.styleSelected)
				node = $scope.styleSelected.parent;
			else
				node = $scope.nodeSelected;

			console.log("Execute details event",node);
			var params = {
				"endpoint": node.name,
				"json": JSON.stringify($scope.payload_json.json,null,"    "),
				"style": $scope.styleSelected ? $scope.styleSelected.name : 'DEFAULT'
			};
			$scope.promise = GatewayService.execute_endpoint($scope.gatewaySelected.id,params);
			$scope.promise.then(
				function(result){
					console.log("result",result);
					$scope.url_details = result.data.url;
					$scope.json_details = angular.fromJson(result.data.data.d.results[0].Json);
					/*$mdDialog.show({
		                controller: 'ResponseEndpointExecutionDialogController',
		                templateUrl: 'templates/response-endpoint-execution.html',
		                parent: angular.element(document.body),
		                targetEvent: event,
		                clickOutsideToClose:false,
		                escapeToClose: false,
		                locals: {
		                 json: angular.fromJson(result.data.data.d.results[0].Json)
		               }
		              });*/
				},
				function(error){
					console.log('failure', error);
                    MessageUtil.showError(error.data.message);
				}
			);
		};

		$scope.pretty_payload_json = function (obj) {
            return angular.toJson(obj, true);
        }

        $scope.json_to_string = function(obj){
        	return JSON.stringify(obj);
        };

		$scope.onLoadJson = function (instance) {
            instance.expandAll();
        };

        $scope.changeStyle = function(style){
        	$scope.styleSelected = style;
        	$scope.styleSelected.parent = $scope.nodeSelected;
        	console.log("changeStyle",style);
        };

	     $scope.$on('selection-changed', function (e, node) {
	        console.log("Node selected",node);
	        $scope.payload_json = {json: null, options: {mode: 'tree'}};
	        $scope.url_details = "";
	        $scope.nodeSelected = node;
	        $scope.styles = [];
	        $scope.styleSelected = null;
	        $scope.json_details = "";
	        if(node.source.STYLES && node.source.STYLES.length>0){
	        	console.log("Styles",node.source.STYLES);
	        	$scope.styles = node.children;
	        	$scope.styleSelected = node.children[0];
	        	$scope.styleSelected.parent = node;
	        }

	    });

	     $scope.$on('expanded-state-changed', function (e, node) {
	        console.log("Expanded node",node);
	        $scope.nodeExpanded = node;
	        //console.log(node.expanded);
    	});

	     
	}]);
})(meister);
(function(app) {
	app.controller('HomeController', ['$scope','$rootScope','$mdMenu','$mdToast','$mdDialog','MessageUtil',
		'GatewayService','$filter','$window',
		function($scope, $rootScope, $mdMenu, $mdToast,$mdDialog,MessageUtil,GatewayService,$filter,$window) {

		$scope.promise = null;
		$scope.gateways = [];
		$scope.gatewaySelectedId = null;
		$scope.gatewaySelected = null;
		$scope.treeOptions = {showIcon:false,expandOnClick:false};
		$scope.nodeSelected = null;
		$scope.nodeExpanded = null;
		var gatewayResponse = null;
		$scope.json = null;
		$scope.show_select_gateway = true;
		$scope.loading_tree = false;
		$scope.wrap={compression : ""}

        var stopMenu =function(e) {
	      e.preventDefault();
	    };

		angular.element($window).on('contextmenu',stopMenu );
	    $scope.$on('$destroy', function() {
		   //angular.element($window).off('contextmenu', stopMenu);
		});
		
		$scope.payload_json = {json: null, options: {mode: 'tree'}};
		$scope.payloadsTree = [];
		$scope.basicTree = [];
		$scope.styleSelected = null;
		$scope.styles = [];
		$scope.show_select_gateway = true;
		
		$scope.json_details = "";
		$scope.json_logs = [];
		$scope.json_logs_title = null;
		$scope.json_logs_content = null;
		$scope.json_logs_content_obj = null;
		$scope.url_details = "";

		$scope.mode_run = false;

		$scope.init = function(){

			console.log("home controller init...");
			
			$scope.promise = GatewayService.index();

			$scope.promise.then(
				function(result){
					console.log("result",result);
                     $scope.gateways = result.data;
				},
				function(error){
					 console.log('failure', error);
                     MessageUtil.showError(error.data.message);
				}
			);
		};

		$scope.isArray = function(what) {
			    return Object.prototype.toString.call(what) === '[object Array]';
		}

		$scope.build_tree = function(){

			$scope.basicTree = [];
			var rootNode = {
				name: $scope.gatewaySelected.name,
				children: []
			};
			$scope.mode_run = false;
			$scope.payloadsTree = [];
			$scope.payload_json = {json: null, options: {mode: 'tree'}};
			$scope.url_details = "";
			$scope.styleSelected = null;

			$scope.basicTree.push(rootNode);
			console.log("Building tree",gatewayResponse);
			if(gatewayResponse && gatewayResponse.d && gatewayResponse.d.results 
				&& gatewayResponse.d.results.length > 0){
				$scope.json = angular.fromJson(gatewayResponse.d.results[0].Json);
				console.log("Json",$scope.json);
				_.forEach($scope.json, function(node){
					 var nodeItem = {
						name:node.PROJECT,
						source:node,
						children: []
					};
					rootNode.children.push(nodeItem);
					_.forEach(node.MODULES, function(module){
						var moduleItem = {
							name: module.NAME,
							source:module,
							children: []
						};
						nodeItem.children.push(moduleItem);
						_.forEach(module.ENDPOINTS, function(endpoint){
							var endpointItem = {
								name: endpoint.NAMESPACE,
								source: endpoint,
								expanded: false,
								children: []
							};
							moduleItem.children.push(endpointItem);
							_.forEach(endpoint.STYLES, function(style){
								var styleItem = {
									name: style.NAME,
									source: style,
									expanded: false,
									children: []
								};
								endpointItem.children.push(styleItem);
							});
						});
					});
				});
				
				
			}
		};

		$scope.changeGateway = function(id){
			$scope.loading_tree = true;
			$scope.gatewaySelectedId = id;
			$scope.nodeSelected = null;
			$scope.nodeExpanded = null;
			$scope.show_select_gateway = false;
			$scope.mode_run = false;
			$scope.url_details = "";
			$scope.styleSelected = null;
			
			console.log("Gateway selected", $scope.gatewaySelectedId);
			$scope.gatewaySelected = _.find($scope.gateways,function(g){
				return id == g.id;
			});
			$scope.promise = GatewayService.execute(id);
			$scope.promise.then(
				function(result){
					$scope.loading_tree = false;
					console.log("result",result);
                     gatewayResponse = result.data;
                      MessageUtil.showInfo("Gateway data loaded");
                     $scope.build_tree();
				},
				function(error){
					$scope.loading_tree = false;
					console.log('failure', error);
                     MessageUtil.showError(error.data.message);
				}
			);
		};

		$rootScope.openActionsInNode = function($mdOpenMenu, $event){
			console.log("openActionsInNode",$event);
			console.log("mdOpenMenu",$mdOpenMenu);
		};

		$scope.openActionsInNodeTemp = function($mdOpenMenu, $event){
			console.log("openActionsInNodeTemp",$event);
		};

		$scope.clear_log_json_result = function(){
			$scope.json_details = "";
			$scope.json_logs = [];
			$scope.json_logs_title = null;
			$scope.json_logs_content = null;
			$scope.json_logs_content_obj = null;
		};

	     $scope.$on('selection-changed', function (e, node) {
	     	console.log("Node selected",node);
	        $scope.payload_json = {json: null, options: {mode: 'tree'}};
	        $scope.url_details = "";
	        $scope.nodeSelected = node;
	        $scope.mode_run = false;
	        $scope.styles = [];
	        $scope.styleSelected = null;
	        if(!node.source){
	     		$scope.nodeSelected = null;
	     		return;
	     	}
	        $scope.nodeSelected = node;
	        if(node.source.STYLES && node.source.STYLES.length>0){
	        	console.log("Styles",node.source.STYLES);
	        	$scope.styles = node.children;
	        	$scope.styleSelected = node.children[0];
	        	$scope.styleSelected.parent = node;
	        }
	    });

	     $scope.$on('action-node-selected', function (e, obj) {
	        console.log("action-node-selected",obj);
	        if(obj.actionName === "addModule")
	        	$scope.addModule(obj.sourceEvent,obj.node);
	        else if(obj.actionName == "addEndpoint")
	        	$scope.addEndpoint(obj.sourceEvent,obj.node);
	        else if(obj.actionName == "addStyle")
	        	$scope.addStyle(obj.sourceEvent,obj.node);
	        else if(obj.actionName == "execute")
	        	$scope.execute(obj.sourceEvent,obj.node);
	        else if(obj.actionName == "execute_by_style")
	        	$scope.execute_by_style(obj.sourceEvent,obj.node);
    	});

	     $scope.$on('selection-changed', function (e, node) {
	        console.log("Node selected",node);
	        $scope.payload_json = {json: null, options: {mode: 'tree'}};
	        $scope.url_details = "";
	        $scope.nodeSelected = node;
	        $scope.styles = [];
	        $scope.mode_run = false;
	        $scope.styleSelected = null;
	        if(!node.source){
	     		$scope.nodeSelected = null;
	     		return;
	     	}
	     	$scope.nodeSelected = node;
	        if(node.source.STYLES && node.source.STYLES.length>0){
	        	console.log("Styles",node.source.STYLES);
	        	$scope.styles = node.children;
	        	$scope.styleSelected = node.children[0];
	        	$scope.styleSelected.parent = node;
	        }
	    });

	     $scope.addModule = function(ev, parentNode){
	     	$scope.mode_run = false;
	     	$mdDialog.show({
                controller: 'ModuleDialogController',
                templateUrl: 'templates/module-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 module: null,
                 parentNode: parentNode,
                 gateway: $scope.gatewaySelected,
                 json: $scope.json
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("Module was created");
                $scope.changeGateway($scope.gatewaySelectedId);
              }, function() {
               
              });
	     };

	     $scope.addEndpoint = function(ev, parentNode){
	     	$scope.mode_run = false;
	     	$mdDialog.show({
                controller: 'EndpointDialogController',
                templateUrl: 'templates/endpoint-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 endpoint: null,
                 parentNode: parentNode,
                 gateway: $scope.gatewaySelected,
                 json: $scope.json
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("Endpoint was created");
                $scope.changeGateway($scope.gatewaySelectedId);
              }, function() {
               
              });
	     };
  
  		$scope.addStyle = function(ev, parentNode){
  			$scope.mode_run = false;
	     	$mdDialog.show({
                controller: 'StyleDialogController',
                templateUrl: 'templates/style-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 style: null,
                 parentNode: parentNode,
                 gateway: $scope.gatewaySelected,
                 json: $scope.json
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("Style was created");
                $scope.changeGateway($scope.gatewaySelectedId);
              }, function() {
               
              });
	     };

	     $scope.execute = function(event, node){
			console.log("Execute event for endpoint",node);
			var params = {"endpoint":node.name};
			$scope.mode_run = true;
			$scope.promise = GatewayService.execute_endpoint($scope.gatewaySelected.id,params);
			$scope.promise.then(
				function(result){
					console.log("result",result);
					$scope.payload_json.json = result.data.data; //angular.fromJson(result.data.data.d.results[0].Json);
				},
				function(error){
					console.log('failure', error);
                    MessageUtil.showError(error.data.message);
				}
			);
		};

		$scope.execute_by_style = function(event, node){
			console.log("execute_by_style",$scope.basicTree);
			$scope.styleSelected = node;
			$scope.execute(event, node.parent);
		};


		$scope.execute_details = function(event){
			var node = null;
			
			if($scope.styleSelected)
				node = $scope.styleSelected.parent;
			else
				node = $scope.nodeSelected;

			console.log("Execute details event",node);
			var params = {
				"endpoint": node.name,
				"json": JSON.stringify($scope.payload_json.json,null,""),
				"style": $scope.styleSelected ? $scope.styleSelected.name : 'DEFAULT'
			};
			if($scope.wrap.compression)
				params.compression=$scope.wrap.compression;

			var execution_time = new Date();
			$scope.promise = GatewayService.execute_endpoint($scope.gatewaySelected.id,params);
			$scope.promise.then(
				function(result){
					console.log("result",result);
					var end_time = new Date();
					var difference = end_time-execution_time;
					$scope.url_details = result.data.url;
					var json_text_title = "RUNTIME: " + moment().format('MMMM DD YYYY, h:mm:ss a');
					if(result.data.compression){
						var binData = new Uint8Array(result.data.data);
					   
					    // Pako magic
					    var data  = pako.inflate(binData);

					    // Convert gunzipped byteArray back to ascii string:
					    json=(String.fromCharCode.apply(null, new Uint16Array(data)));
					    json_text_content = $filter('json')(angular.fromJson(json));
					}
					else{
			   		   json_text_content = $filter('json')(result.data.data, 2);
					}

					var json_text_item = {
						title:json_text_title + " - Time Execution: " + (difference/1000) + " seconds" ,
						content:json_text_content
					};

					$scope.json_logs_title = json_text_item.title;
					$scope.json_logs_content = json_text_item.content;
					$scope.json_logs_content_obj = result.data.data; //angular.fromJson(result.data.data.d.results[0].Json);
					$scope.json_logs.push(json_text_item);

					//$scope.json_details += "<span class=\"title-log-result\">" + json_text_title + ": Result</span><br/>";
					//$scope.json_details += "<span class=\"content-log-result\"> <code><pre>"+json_text_content+"</pre></code></span><br/><br/>";
					/*$mdDialog.show({
		                controller: 'ResponseEndpointExecutionDialogController',
		                templateUrl: 'templates/response-endpoint-execution.html',
		                parent: angular.element(document.body),
		                targetEvent: event,
		                clickOutsideToClose:false,
		                escapeToClose: false,
		                locals: {
		                 json: angular.fromJson(result.data.data.d.results[0].Json)
		               }
		              });*/
				},
				function(error){
					console.log('failure', error);
                    MessageUtil.showError(error.data.message);
				}
			);
		};

		$scope.changeJsonLog = function(log){
			console.log("changeJsonLog",log);
			$scope.json_logs_title = log;
			var item_selected = _.find($scope.json_logs,function(i){return i.title === log});
			if(item_selected){
				$scope.json_logs_content = item_selected.content;
			}
		}

        $scope.json_to_string = function(obj){
        	return JSON.stringify(obj);
        };

		$scope.onLoadJson = function (instance) {
            instance.expandAll();
        };

         $scope.changeStyle = function(style){
        	$scope.styleSelected = style;
        	$scope.styleSelected.parent = $scope.nodeSelected;
        	console.log("changeStyle",style);
        };

	}]);
})(meister);

(function(app) {
	app.controller('LoginController',
    ['$scope', '$rootScope', '$location','$mdToast', '$cookies','AuthenticationService','MessageUtil',
    'COOKIE_LAST_REQUEST',
    function ($scope, $rootScope, $location, $mdToast, $cookies, AuthenticationService, MessageUtil,
      COOKIE_LAST_REQUEST) {
        
        $cookies.remove('meister-sdk-token');
        $cookies.remove(COOKIE_LAST_REQUEST);
        $scope.login = function () {
            $scope.promise =  AuthenticationService.Login($scope.username, $scope.password);

            $scope.promise.then(
                  function(result) { 
                      console.log("Login",result);
                      if(result.data && result.data.access_token)
                        $location.path('/home');
                      else {
                        $cookies.remove('meister-sdk-token');
                        MessageUtil.showError('The user credentials were incorrect');
                      }
                  },
                  function(errorPayload) {
                      console.log('failure login', errorPayload);
                      MessageUtil.showError('The user credentials were incorrect');
                  }
             );

        };
    }]);
})(meister);

(function(app) {
	app.controller('MainController', ['$scope','$rootScope','$cookies','$location','$timeout',
		'$mdSidenav','$mdMenu','$state','SYSTEM_ADMIN','CLIENT_ADMIN','CLIENT_USER','AuthenticationService',
		function($scope,$rootScope,$cookies,$location,$timeout, $mdSidenav,$mdMenu, $state, 
			SYSTEM_ADMIN, CLIENT_ADMIN, CLIENT_USER, AuthenticationService) {
		
		console.log("MainController init");
		$rootScope.toggleLeft = buildToggler('left');
    	$rootScope.toggleRight = buildToggler('right');
    	$rootScope.SYSTEM_ADMIN = SYSTEM_ADMIN;
    	$rootScope.CLIENT_ADMIN = CLIENT_ADMIN;
    	$rootScope.CLIENT_USER = CLIENT_USER;
    	
    	
	    function buildToggler(componentId) {
	      return function() {
	        $mdSidenav(componentId).toggle();
	      };
	    }

	     $rootScope.openMenu = function($mdOpenMenu,ev) {
		      $mdOpenMenu(ev);
		 };

		 $rootScope.logout = function(){
		 	//$cookies.remove('meister-sdk-token');
		 	AuthenticationService.Logout().then(
		 		function(result){
		 			console.log("Logout successful",result);
		 			$location.path('/login');
		 		},
		 		function(error){
		 			console.log(error);
		 		}
		 		); 
		 	
		 };

		 $rootScope.user_type = function(){
		 	var token_data = $cookies.get('meister-sdk-token');
		 	if(token_data){
		 		token_data = angular.fromJson(token_data);
		 		return token_data.user_type;
		 	}

		 	return -1;
		 };

		 $rootScope.user_id = function(){
		 	var token_data = $cookies.get('meister-sdk-token');
		 	if(token_data){
		 		token_data = angular.fromJson(token_data);
		 		return token_data.user_id;
		 	}

		 	return 0;
		 };

	    $rootScope.transition = 'fade-in';
	}]);
})(meister);

(function(app) {
	app.controller('ModuleDialogController',
    ['$scope','$mdDialog','module','parentNode','gateway', 'json','GatewayService','MessageUtil',
    function ($scope, $mdDialog, module, parentNode, gateway, json, GatewayService, MessageUtil) {
  
        $scope.module = {};
       
        $scope.promise = null;
         $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!module){
          $scope.module.PKY = "";
          $scope.module.NAME = "";
          $scope.module.DATE = new Date();
          $scope.module.ENDPOINTS = [];
        } else {
          $scope.module = angular.copy(module);
        }

        console.log("Module", module);
        console.log("ParenNode", parentNode);


        $scope.save = function(){

          var json_to_send =  GatewayService.buildJsonByNewModule(json, parentNode.source, $scope.module);
          
          var params = {
            json: JSON.stringify(json_to_send)
          };

            $scope.promise = GatewayService.execute_changes(gateway.id, params);
            
            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  $mdDialog.hide(result);
                  },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
         
        };
        
    }]);
})(meister);
(function(app) {
	app.controller('ResponseEndpointExecutionDialogController',
    ['$scope', '$mdDialog','json',
    function ($scope, $mdDialog, json) {
        
        $scope.json = json;
        
        $scope.cancel = function() {
           $mdDialog.cancel();
        };

        $scope.pretty_payload_json = function (obj) {
            return angular.toJson(obj, true);
        }

        
    }]);
})(meister);
(function(app) {
	app.controller('StyleDialogController',
    ['$scope','$mdDialog','style','parentNode','gateway', 'json','GatewayService','MessageUtil',
    function ($scope, $mdDialog, style, parentNode, gateway, json, GatewayService, MessageUtil) {
  
        $scope.style = {};
       
        $scope.promise = null;
         $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!style){
          $scope.style.PKY = "";
          $scope.style.DIRECTION = "";
          $scope.style.NAME = "";
          $scope.style.JSON = "";
        } else {
          $scope.style = angular.copy(style);
        }

       console.log("Style", style);
        console.log("ParenNode", parentNode);


        $scope.save = function(){

          var json_to_send =  GatewayService.buildJsonByNewStyle(json, parentNode.source, $scope.style);
          
          var params = {
            json: JSON.stringify(json_to_send)
          };

            $scope.promise = GatewayService.execute_changes(gateway.id, params);
            
            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  $mdDialog.hide(result);
                  },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
         
        };
        
    }]);
})(meister);
(function(app) {
	app.controller('UserController',
    ['$scope', '$location','$mdToast','$mdDialog','UserService','MessageUtil',
    'SYSTEM_ADMIN','CLIENT_ADMIN','CLIENT_USER',
    function ($scope, $location, $mdToast, $mdDialog, UserService, MessageUtil, 
      SYSTEM_ADMIN,CLIENT_ADMIN,CLIENT_USER) {
        
        $scope.users = [];
        $scope.promise = null;
        
        $scope.filter = {
          show: false
        }

        $scope.query = {
          order: 'email',
          limit: 5,
          page: 1,
          filterByEmail:'',
          filterByFirstName:'',
          filterByLastName:''
        };

        $scope.limitOptions = [5, 10, 25, 50, 100];

        $scope.removeFilter = function(){
          $scope.filter.show = false;
          $scope.query.filterByEmail = "";
          $scope.query.filterByFirstName = "";
          $scope.query.filterByLastName = "";
        };

        $scope.init = function(){
          console.log("UserController init...");
          $scope.promise = UserService.index();

          $scope.promise.then(
                  function(result) { 
                    console.log("result",result);
                      $scope.users = result.data;
                  },
                  function(errorPayload) {
                      console.log('failure login', errorPayload);
                      MessageUtil.showError(errorPayload.data.message);
                  }
             );
        };

         $scope.add = function(ev, user) {
              $mdDialog.show({
                controller: 'UserDialogController',
                templateUrl: 'templates/user-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 user: null
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("User was created");
                $scope.init();
              }, function() {
               
              });
         };

         $scope.edit = function(ev, user) {
              $mdDialog.show({
                controller: 'UserDialogController',
                templateUrl: 'templates/user-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 user: user
               }
              })
              .then(function(result) {
                  MessageUtil.showInfo("User was updated");
                  $scope.init();
              }, function() {
               
              });
         };

         $scope.type = function(t){
             if(t == SYSTEM_ADMIN)
              return "SYSTEM_ADMIN";
            else if(t == CLIENT_ADMIN)
              return "CLIENT_ADMIN";
            else if(t == CLIENT_USER)
              return "CLIENT_USER";
         };

         $scope.delete = function(ev, user){
            var confirm = $mdDialog.confirm()
                .title('You are about to delete the following')
                .htmlContent('User ' + user.name)
                .targetEvent(ev)
                .ok('Yes')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
               $scope.promise = UserService.destroy(user.id);
               $scope.promise.then(
                  function(result){
                    MessageUtil.showInfo("User was deleted");
                    $scope.init();
                  },
                  function(error){
                    MessageUtil.showError(error.data.message);
                  }
                );
            }, function() {
              
            });
         };

        
    }]);
})(meister);
(function(app) {
	app.controller('UserDialogController',
    ['$scope','$rootScope','$mdDialog','user','ClientService','UserService','MessageUtil',
    function ($scope, $rootScope, $mdDialog, user, ClientService, UserService, MessageUtil) {
  
        $scope.user = {};
        $scope.types = [];
        $scope.clients = [];
        $scope.promise = null;

        $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!user){
          $scope.user.email = "";
          $scope.user.first_name = "";
          $scope.user.last_name = "";
          $scope.user.type = $rootScope.CLIENT_USER;
          $scope.user.client_id = null;
        } else
            $scope.user = angular.copy(user);

           console.log("User", user);


        if($rootScope.user_type() == $rootScope.SYSTEM_ADMIN){
           ClientService.index().then(
              function(result){
                $scope.clients = result.data;
                if(!$scope.user.id)
                  $scope.user.client_id = result.data[0].id;
              },
              function(error){
                console.log("error",error);
                MessageUtil.showError(error.data.message);
              }
            );
        } else {
          $scope.clients = [];
          $scope.client_id = null;
        }


        UserService.types().then(
            function(result){
              $scope.types = result.data;
            },
            function(error){
              console.log("error",error);
              MessageUtil.showError(error.data.message);
            }
          );


       

        $scope.save = function(){
          
            if($scope.user.id)
              $scope.promise = UserService.update($scope.user.id, $scope.user);
            else
              $scope.promise = UserService.store($scope.user);

            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  $mdDialog.hide(result);
                },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
      
        };
        
    }]);
})(meister);
/*
	@license Angular TreeWidget version 1.0.1
	ⓒ 2016 Alex Suleap https://github.com/AlexSuleap/agular-tree-widget
	License: MIT
*/

(function (angular) {
    'use strict';

    angular.module('TreeWidget', ['ngAnimate', 'RecursionHelper'])
        .directive('tree', [  function () {
            return {
                restrict: "E",
                scope: { nodes: '=', options: '=?' },
                template: "<treenode nodes='nodes' oncontextmenu='return false' tree='nodelist' options='options'></treenode>",
                compile: function compile(tElement, tAttrs, transclude) {
                    return {
                        pre: function (scope) {
                            scope.nodelist = [];
                            scope.options = scope.options || (scope.options = { showIcon: true, expandOnClick: false, multipleSelect: false });
                            scope.count = 0;
                            function generateNodeList(nodes, parent) {
                                if (nodes != undefined) {
                                    if (nodes.length > 0) {
                                        for (var i = 0; i < nodes.length ; i++) {
                                            var node = nodes[i];

                                            //Generate node ids if no ids are defined
                                            if (node.nodeId === undefined) {
                                                node.nodeId = (Math.random() * 10) + 1;//"tree-node-" + scope.count;
                                                scope.count++;
                                            }

                                            //expanded all the nodes
                                            if (node.expanded === undefined && node.children != undefined) {
                                                node.expanded = true;
                                            }
                                            if (parent != undefined) {
                                                node.parentId = parent.nodeId;
                                            }
                                            if (scope.nodelist.indexOf(node) == -1) {
                                                scope.nodelist.push(node);
                                            }
                                            generateNodeList(node.children, node);
                                        }
                                    }
                                }
                            }

                            scope.$watch(function () {
                                generateNodeList(scope.nodes);
                            });
                        }
                    }
                }
            }
        }])
        .filter('nodeFilter', ['$filter', function ($filter) {

            return function (nodes, filter) {
                var recursiveFilter = function (nodes, filter) {
                    var filtered = [];
                    angular.forEach(nodes, function (node) {
                        if ($filter('filter')([node], filter).length > 0) {
                            filtered.push(node);
                        } else if (angular.isArray(node.children) && node.children.length > 0) {
                            var internal = recursiveFilter(node.children, filter);
                            if (internal.length > 0) {
                                filtered.push(node);
                            }
                        }
                    });
                    return filtered;
                };
                return recursiveFilter(nodes, filter);
            }

        }])
        .directive('treenode', ['RecursionHelper','$timeout', function (RecursionHelper,$timeout) {
            return {
                restrict: "E",
                scope: { nodes: '=', tree: '=', options: '=?' },
                template: '<ul oncontextmenu="return false" >'
                + '<li ng-repeat="node in nodes | nodeFilter:options.filter track by node.nodeId" class="node" id="{{::node.nodeId}}">'
                + '<i class="tree-node-ico pointer" ng-class="{\'tree-node-expanded\': node.expanded && (node.children | nodeFilter:options.filter).length > 0,\'tree-node-collapsed\':!node.expanded && (node.children | nodeFilter:options.filter).length > 0}" ng-click="toggleNode(node)"></i>'
                + '<span class="node-title pointer" ng-click="selectNode(node, $event)" ng-class="{\'disabled\':node.disabled}">'
                + '<span><i class="tree-node-ico" ng-if="options.showIcon" ng-class="{\'tree-node-image\':node.children, \'tree-node-leaf\':!node.children}" ng-style="node.image && {\'background-image\':\'url(\'+node.image+\')\'}"></i>'
                + '     <span class="node-name" tabindex="{{::(node.focusable ? 0 : -1)}}" ng-class="{selected: node.selected&& !node.disabled}">'
                + ' <span ng-if="!node.source">{{node.name}}</span>'
                + ' <md-menu ng-if="node.source">'
                + '     <span ng-click="$mdMenu.open()"  ng-mouseup="openMenu($mdOpenMenu,$event,node)">'
                + '       {{node.name}}'
                + '     </span>'
                + '     <md-menu-content  oncontextmenu="return false" >'
                + '         <md-menu-item ng-if="node  && node.source.MODULES">'
                + ' <md-button  '
                + '      ng-click="emitActionNodeSelected(\'addModule\',node,$event)" '
                + ' >'
                + '     <md-icon ng-bind="\'note_add\'"></md-icon> Add module'
                + '  </md-button>'
                + '         </md-menu-item>'
                + '         <md-menu-item ng-if="node  && node.source.ENDPOINTS">'
                + ' <md-button  '
                + '      ng-click="emitActionNodeSelected(\'addEndpoint\',node,$event)" '
                + ' >'
                + '     <md-icon ng-bind="\'note_add\'"></md-icon> Add endpoint'
                + '  </md-button>'
                + '         </md-menu-item>'
                + '         <md-menu-item ng-if="node  && node.source.STYLES">'
                + ' <md-button  '
                + '      ng-click="emitActionNodeSelected(\'addStyle\',node,$event)" '
                + ' >'
                + '     <md-icon ng-bind="\'note_add\'"></md-icon> Add style'
                + '  </md-button>'
                + '         </md-menu-item>'
                + '         <md-menu-item ng-if="node  && node.source.STYLES">'
                + ' <md-button  '
                + '      ng-click="emitActionNodeSelected(\'execute\',node,$event)" '
                + ' >'
                + '     <md-icon ng-bind="\'send\'"></md-icon> Execute'
                + '  </md-button>'
                + '         </md-menu-item>'
                + '         <md-menu-item ng-if="!node.source.MODULES && !node.source.ENDPOINTS && !node.source.STYLES">'
                + ' <md-button  '
                + '      ng-click="emitActionNodeSelected(\'execute_by_style\',node,$event)" '
                + ' >'
                + '     <md-icon ng-bind="\'send\'"></md-icon> Execute'
                + '  </md-button>'
                + '         </md-menu-item>'
                + '    </md-menu-content>'
                + ' </md-menu>'
                + '         <span ng-if="node.badge != null" class="label" ng-class="node.badge.type">{{node.badge.title}}</span>'
                + '     </span>'
                + '</span>'
                + '</span>'
                + '<treenode ng-if="node.children && node.expanded" nodes=\'node.children\' tree="tree" options="options"></treenode>'
                + '</li>'
                + '</ul>',
                compile: function (element) {
                    return RecursionHelper.compile(element, function (scope, iElement, iAttrs, controller, transcludeFn) {
                        function cleanAllSelectedExcept(node) {
                            angular.forEach(scope.tree, function (item) {
                                if (node != item)
                                    item.selected = false;
                            });
                        }

                        function getSelectedNodes() {
                            return scope.tree.filter(function (item) { return item.selected; });
                        }

                        scope.emitActionNodeSelected = function(actionName,node,event){
                            scope.$emit('action-node-selected', {"actionName":actionName,"node":node,"sourceEvent":event});
                        }

                        //Select node
                        scope.selectNode = function (node, $event) {
                            if (node.disabled) { return; }

                            
                            var selectedNode;
                            if (scope.options.multipleSelect === true) {
                                node.selected = !node.selected;
                                selectedNode = getSelectedNodes();
                            } else if (scope.options.multipleSelect === 'ctrlKey' || scope.options.multipleSelect === 'altKey') {
                                if ($event[scope.options.multipleSelect]) {
                                    node.selected = !node.selected;
                                } else {
                                    node.selected = true;
                                    cleanAllSelectedExcept(node);
                                }
                                selectedNode = getSelectedNodes();
                            } else {
                                node.selected = true;
                                cleanAllSelectedExcept(node);
                                selectedNode = node;
                            }
                            scope.$emit('selection-changed', selectedNode);
                            if (scope.options.onSelectNode) {
                                scope.options.onSelectNode(selectedNode);
                            }

                            if (scope.options.expandOnClick) {
                                if (node.children != undefined) {
                                    node.expanded = !node.expanded;
                                    scope.$emit('expanded-state-changed', node);
                                    if (scope.options.onExpandNode) {
                                        scope.options.onExpandNode(node);
                                    }
                                }
                            }
                        }

                        //Expand collapse node
                        scope.toggleNode = function (node) {
                            if (node.children != undefined) {
                                node.expanded = !node.expanded;
                                scope.$emit('expanded-state-changed', node);
                                if (scope.options.onExpandNode) {
                                    scope.options.onExpandNode(node);
                                }
                            }
                        }

                        scope.openMenu = function (menu,e,node) {
                            if(e.which==3){
                                var itemSelected = getSelectedNodes();
                                e.preventDefault();
                                e.stopPropagation();
                                if(itemSelected.length==1 &&
                                    itemSelected[0].nodeId==node.nodeId){
                                    menu(e);
                                    $timeout(function() {
                                        var element = document.getElementsByClassName('md-menu-backdrop');
                                        element[0].oncontextmenu = function() {
                                          return false;
                                        }
                                    });
                                }
                            }
                        }
                    });
                }
            }
        }]);

})(angular);

/*! 
 * angular-loading-bar v0.9.0
 * https://chieffancypants.github.io/angular-loading-bar
 * Copyright (c) 2016 Wes Cruver
 * License: MIT
 */
/*
 * angular-loading-bar
 *
 * intercepts XHR requests and creates a loading bar.
 * Based on the excellent nprogress work by rstacruz (more info in readme)
 *
 * (c) 2013 Wes Cruver
 * License: MIT
 */


(function() {

'use strict';

// Alias the loading bar for various backwards compatibilities since the project has matured:
angular.module('angular-loading-bar', ['cfp.loadingBarInterceptor']);
angular.module('chieffancypants.loadingBar', ['cfp.loadingBarInterceptor']);


/**
 * loadingBarInterceptor service
 *
 * Registers itself as an Angular interceptor and listens for XHR requests.
 */
angular.module('cfp.loadingBarInterceptor', ['cfp.loadingBar'])
  .config(['$httpProvider', function ($httpProvider) {

    var interceptor = ['$q', '$cacheFactory', '$timeout', '$rootScope', '$log', 'cfpLoadingBar', function ($q, $cacheFactory, $timeout, $rootScope, $log, cfpLoadingBar) {

      /**
       * The total number of requests made
       */
      var reqsTotal = 0;

      /**
       * The number of requests completed (either successfully or not)
       */
      var reqsCompleted = 0;

      /**
       * The amount of time spent fetching before showing the loading bar
       */
      var latencyThreshold = cfpLoadingBar.latencyThreshold;

      /**
       * $timeout handle for latencyThreshold
       */
      var startTimeout;


      /**
       * calls cfpLoadingBar.complete() which removes the
       * loading bar from the DOM.
       */
      function setComplete() {
        $timeout.cancel(startTimeout);
        cfpLoadingBar.complete();
        reqsCompleted = 0;
        reqsTotal = 0;
      }

      /**
       * Determine if the response has already been cached
       * @param  {Object}  config the config option from the request
       * @return {Boolean} retrns true if cached, otherwise false
       */
      function isCached(config) {
        var cache;
        var defaultCache = $cacheFactory.get('$http');
        var defaults = $httpProvider.defaults;

        // Choose the proper cache source. Borrowed from angular: $http service
        if ((config.cache || defaults.cache) && config.cache !== false &&
          (config.method === 'GET' || config.method === 'JSONP')) {
            cache = angular.isObject(config.cache) ? config.cache
              : angular.isObject(defaults.cache) ? defaults.cache
              : defaultCache;
        }

        var cached = cache !== undefined ?
          cache.get(config.url) !== undefined : false;

        if (config.cached !== undefined && cached !== config.cached) {
          return config.cached;
        }
        config.cached = cached;
        return cached;
      }


      return {
        'request': function(config) {
          // Check to make sure this request hasn't already been cached and that
          // the requester didn't explicitly ask us to ignore this request:
          if (!config.ignoreLoadingBar && !isCached(config)) {
            $rootScope.$broadcast('cfpLoadingBar:loading', {url: config.url});
            if (reqsTotal === 0) {
              startTimeout = $timeout(function() {
                cfpLoadingBar.start();
              }, latencyThreshold);
            }
            reqsTotal++;
            cfpLoadingBar.set(reqsCompleted / reqsTotal);
          }
          return config;
        },

        'response': function(response) {
          if (!response || !response.config) {
            $log.error('Broken interceptor detected: Config object not supplied in response:\n https://github.com/chieffancypants/angular-loading-bar/pull/50');
            return response;
          }

          if (!response.config.ignoreLoadingBar && !isCached(response.config)) {
            reqsCompleted++;
            $rootScope.$broadcast('cfpLoadingBar:loaded', {url: response.config.url, result: response});
            if (reqsCompleted >= reqsTotal) {
              setComplete();
            } else {
              cfpLoadingBar.set(reqsCompleted / reqsTotal);
            }
          }
          return response;
        },

        'responseError': function(rejection) {
          if (!rejection || !rejection.config) {
            $log.error('Broken interceptor detected: Config object not supplied in rejection:\n https://github.com/chieffancypants/angular-loading-bar/pull/50');
            return $q.reject(rejection);
          }

          if (!rejection.config.ignoreLoadingBar && !isCached(rejection.config)) {
            reqsCompleted++;
            $rootScope.$broadcast('cfpLoadingBar:loaded', {url: rejection.config.url, result: rejection});
            if (reqsCompleted >= reqsTotal) {
              setComplete();
            } else {
              cfpLoadingBar.set(reqsCompleted / reqsTotal);
            }
          }
          return $q.reject(rejection);
        }
      };
    }];

    $httpProvider.interceptors.push(interceptor);
  }]);


/**
 * Loading Bar
 *
 * This service handles adding and removing the actual element in the DOM.
 * Generally, best practices for DOM manipulation is to take place in a
 * directive, but because the element itself is injected in the DOM only upon
 * XHR requests, and it's likely needed on every view, the best option is to
 * use a service.
 */
angular.module('cfp.loadingBar', [])
  .provider('cfpLoadingBar', function() {

    this.autoIncrement = true;
    this.includeSpinner = true;
    this.includeBar = true;
    this.latencyThreshold = 100;
    this.startSize = 0.02;
    this.parentSelector = 'body';
    this.spinnerTemplate = '<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>';
    this.loadingBarTemplate = '<div id="loading-bar"><div class="bar"><div class="peg"></div></div></div>';

    this.$get = ['$injector', '$document', '$timeout', '$rootScope', function ($injector, $document, $timeout, $rootScope) {
      var $animate;
      var $parentSelector = this.parentSelector,
        loadingBarContainer = angular.element(this.loadingBarTemplate),
        loadingBar = loadingBarContainer.find('div').eq(0),
        spinner = angular.element(this.spinnerTemplate);

      var incTimeout,
        completeTimeout,
        started = false,
        status = 0;

      var autoIncrement = this.autoIncrement;
      var includeSpinner = this.includeSpinner;
      var includeBar = this.includeBar;
      var startSize = this.startSize;

      /**
       * Inserts the loading bar element into the dom, and sets it to 2%
       */
      function _start() {
        if (!$animate) {
          $animate = $injector.get('$animate');
        }

        $timeout.cancel(completeTimeout);

        // do not continually broadcast the started event:
        if (started) {
          return;
        }

        var document = $document[0];
        var parent = document.querySelector ?
          document.querySelector($parentSelector)
          : $document.find($parentSelector)[0]
        ;

        if (! parent) {
          parent = document.getElementsByTagName('body')[0];
        }

        var $parent = angular.element(parent);
        var $after = parent.lastChild && angular.element(parent.lastChild);

        $rootScope.$broadcast('cfpLoadingBar:started');
        started = true;

        if (includeBar) {
          $animate.enter(loadingBarContainer, $parent, $after);
        }

        if (includeSpinner) {
          $animate.enter(spinner, $parent, loadingBarContainer);
        }

        _set(startSize);
      }

      /**
       * Set the loading bar's width to a certain percent.
       *
       * @param n any value between 0 and 1
       */
      function _set(n) {
        if (!started) {
          return;
        }
        var pct = (n * 100) + '%';
        loadingBar.css('width', pct);
        status = n;

        // increment loadingbar to give the illusion that there is always
        // progress but make sure to cancel the previous timeouts so we don't
        // have multiple incs running at the same time.
        if (autoIncrement) {
          $timeout.cancel(incTimeout);
          incTimeout = $timeout(function() {
            _inc();
          }, 250);
        }
      }

      /**
       * Increments the loading bar by a random amount
       * but slows down as it progresses
       */
      function _inc() {
        if (_status() >= 1) {
          return;
        }

        var rnd = 0;

        // TODO: do this mathmatically instead of through conditions

        var stat = _status();
        if (stat >= 0 && stat < 0.25) {
          // Start out between 3 - 6% increments
          rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;
        } else if (stat >= 0.25 && stat < 0.65) {
          // increment between 0 - 3%
          rnd = (Math.random() * 3) / 100;
        } else if (stat >= 0.65 && stat < 0.9) {
          // increment between 0 - 2%
          rnd = (Math.random() * 2) / 100;
        } else if (stat >= 0.9 && stat < 0.99) {
          // finally, increment it .5 %
          rnd = 0.005;
        } else {
          // after 99%, don't increment:
          rnd = 0;
          _set(0);
        }

        var pct = _status() + rnd;
        _set(pct);
      }

      function _status() {
        return status;
      }

      function _completeAnimation() {
        status = 0;
        started = false;
      }

      function _complete() {
        if (!$animate) {
          $animate = $injector.get('$animate');
        }

        $rootScope.$broadcast('cfpLoadingBar:completed');
        _set(1);

        $timeout.cancel(completeTimeout);

        // Attempt to aggregate any start/complete calls within 500ms:
        completeTimeout = $timeout(function() {
          var promise = $animate.leave(loadingBarContainer, _completeAnimation);
          if (promise && promise.then) {
            promise.then(_completeAnimation);
          }
          $animate.leave(spinner);
        }, 500);
      }

      return {
        start            : _start,
        set              : _set,
        status           : _status,
        inc              : _inc,
        complete         : _complete,
        autoIncrement    : this.autoIncrement,
        includeSpinner   : this.includeSpinner,
        latencyThreshold : this.latencyThreshold,
        parentSelector   : this.parentSelector,
        startSize        : this.startSize
      };


    }];     //
  });       // wtf javascript. srsly
})();       //

(function(app) {
	app.directive('mainMenu', function() {
		return {
			//scope: {},
			//controller: function($scope, $element, $attrs, $transclude) {},
			//require: 'ngModel',
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			//template: '<p>Hola Mundo!!</p>'
			templateUrl: 'templates/main-menu.html',
			//replace: true,
			//transclude: true,
			//link: function($scope, elem, attrs, controller) {}
		};
	});
})(meister);

(function(app) {
	app.directive('mainToolbar', function() {
		return {
			//scope: {},
			//controller: function($scope, $element, $attrs, $transclude) {},
			//require: 'ngModel',
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			//template: '<p>Hola Mundo!!</p>'
			templateUrl: 'templates/main-toolbar.html',
			//replace: true,
			//transclude: true,
			//link: function($scope, elem, attrs, controller) {}
		};
	});
})(meister);
